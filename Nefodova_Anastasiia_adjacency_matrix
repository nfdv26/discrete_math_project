def getting_edges():
    edges_lists = []
    edges = input('Enter your edges:')
    lengh = len(edges)
    while edges != "":
        numb = ''
        edges_list = []
        for i in edges:
            if i != ',' and i != '\n':
                numb = numb + i
            if (i == ',' or i == '\n') or edges.index(i) == lengh-1:
                edges_list.append(int(numb))
                numb = ''
        edges_lists.append(edges_list)
        edges = input()
        lengh = len(edges)
    return edges_lists


def size_of_matrix(lst):
    """
    (list) -> (int)

    Returning maximal number from list of lists.

    >>>size_of_matrix([[1, 2], [3, 9], [5, 7]])
    9
    >>>size_of_matrix([[14, 2], [3, 8], [5, 7]])
    14
    """
    edges_list_new = []
    for number in lst:
        for i in number:
            edges_list_new.append(i)
    number = max(edges_list_new)
    return number


def building_matrix(size):
    """
    (int) -> (list)
    Creating list of list by given maximal number.

    >>>building_matrix(3)
    [[0, 0, 0], [0, 0, 0], [0, 0, 0]]
    >>>building_matrix(2)
    [[0, 0], [0, 0]]

    """
    matrix = []
    while len(matrix) < int(size):
        row = []
        while len(row) < int(size):
            row.append(0)
        matrix.append(row)
    return matrix


def replacing(edges_lists, matrix):
    """
    (list, list) -> (list)
    Replacing 0 in matrix by 1 according to the  edges of the graph.

    >>>replacing([[1, 2], [3, 4]], [[0, 0, 0, 0], [0, 0, 0, 0],
                 [0, 0, 0, 0], [0, 0, 0, 0]])
    [[0, 1, 0, 0], [1, 0, 0, 0], [0, 0, 0, 1], [0, 0, 1, 0]]

    """
    for edge in edges_lists:
        matrix[edge[0]-1][edge[1]-1] = 1
        matrix[edge[1]-1][edge[0]-1] = 1
    return matrix


def main():
    lst = getting_edges()
    number = size_of_matrix(lst)
    matrix = building_matrix(number)
    main_matrix = replacing(lst, matrix)
    for row in main_matrix:
        print(row)
main()
